----------------------------------------------------------------------------
スマホアプリ開発塾(1)基礎編 - Java言語 3 - クラスの基礎
----------------------------------------------------------------------------

まずは、以下の参考サイトでクラスについて勉強しましょう。

★ 参考サイト
http://www.atmarkit.co.jp/ait/articles/0904/14/news115.html
http://www.javadrive.jp/start/const/index1.html


---
◆クラス

クラスは、基本的な値型変数のみでは表現が難しい複合的な値の塊とそれに付随する処理（関数／メソッド）をまとめることができる構造です。
中にたくさんの箱とそれらを処理するルールや役割を決めた部屋や物置のようなものと考えるとイメージしやすいかもしれません。
単なる値型変数とは違って、それらの外面的な機能や内面的な性質をも定義でき、あたかも性格を与えたかのような振る舞いも作ることができるため、実生活にある物や人に対応させてプログラミングできる「オブジェクト指向プログラミング」のモジュール作成に適しています。
これらの性質から、一度理解してしまえば感覚的に組むことができるのも一つの特徴といえます。
また、成功例の多い組み方を「デザインパターン」として広く公開されているために、これらを組み合わせるだけでも効率が良くメンテナンス性が高いプログラミングが可能です。

クラスは、変数や定数、メソッドをひとまとめにしたものが基本です。
public や private などの修飾子を使って、これらの隠蔽度を決めることもできます。
private に設定された変数・定数・メソッドはクラスの内部からは見ることができますが、外部からは直接見ることができません。

例えば、
class SyouhizeiCalculater
{
	private final static float SALES_TAX = 1.08f;	// 消費税率の定数
	
	// 税抜価格から税込価格に計算するメソッド
	public float calculateTaxedPrice(float priceNoTaxed)
	{
		return priceNoTaxed * SALES_TAX;
	}
}
のように消費税率の数値（1.08f）は外部から見えないように隠蔽化することができます。


----
【問 1】難易度：☆

筆記問題です。
ソースを見て解答をし、最後にプログラムを実行して答えを確認しましょう。

「はじめに」を参考に (A) の状態を作りましょう。
main メソッドの前の行に以下のソースを記述しましょう。（コピペ可。）

↓↓↓↓
	static class Date
	{
		//======================================================================
		// メンバ変数
		
		private int _year;
		private int _month;
		private int _day;
		
		//======================================================================
		// メソッド
		
		// コンストラクタ
		public Date(int year, int month, int day)
		{
			_year = year;
			_month = month - 1;
			_day = day;
		}
		
		// 年を得る
		public int getYear()
		{
			return _year;
		}
		
		// 月を得る
		public int getMonth()
		{
			return _month + 1;
		}
		
		// 日を得る
		public int getDay()
		{
			return _day;
		}
	}
↑↑↑↑

次に、//X の下に以下のソースを記述しましょう。（コピペ可。）

↓↓↓↓
		Date d1 = new Date(2013, 2, ？1？);
		System.out.println("d1 = " + d1.getYear() + "/" + d1.getMonth() + "/" + d1.？2？);
↑↑↑↑

エラーを修正して、

d1 = 2013/2/3

と出力するようにプログラムを修正しましょう。

※年と日は数値通りの値ですが、月の値は伝統的に 1 月を 0 とします。


----
【問 2】難易度：☆☆

問 1 の続きとして、曜日を算出するメソッドを追加しましょう。
曜日は 0 を日曜日として、1 を 月、2 を 火、3 を 水、4 を 木、5 を 金、6 を 土という整数を返しましょう。
メソッドの名前は、getDayOfWeek とします。

＜ヒント＞
	曜日は「ツェラーの公式」を使用する場合、以下のようなプログラムで算出できます。
		if(month <= 2)	// 2 月以下
		{
		    year--;
		    month += 12;
		}
		int youbi = (365 * year + year / 4 - year / 100 + year / 400 + 306 * (month + 1) / 10 + day - 428) % 7;
	☆上記式の month は 1 ～ 12
	☆このとき、メンバ変数を計算のために変更してしまわないように注意しましょう

＜ヒント＞
	メソッドの 1 行目は、
	public int getDayOfWeek()
	からはじまります。


----
【問 3】難易度：☆☆☆

問 2 の続きとして、getDayOfWeek が返している整数を enum による定数を返してみましょう。
返す定数は以下の定義とします。

↓↓↓↓
		public enum DayOfWeek
		{
			SUNDAY,
			MONDAY,
			TUESDAY,
			WEDNESDAY,
			THURSDAY,
			FRIDAY,
			SATURDAY,
		}
↑↑↑↑

この定義を class Date 内に書きましょう。

＜ヒント＞
	メソッドの１行目は、
	public DayOfWeek getYoubi()
	からはじまります。


----
【問 4】難易度：☆☆☆

問 1 の続きとしてデフォルトコンストラクタ、コピーコンストラクタを定義してみましょう。
デフォルトコンストラクタ、コピーコンストラクタは、以下のそれぞれの文を実現するものです。

↓↓↓↓
		// デフォルトコンストラクタを使用する
		Date d2 = new Date();
		System.out.println("d2 = " + d2.getYear() + "/" + d2.getMonth() + "/" + d2.getDay());
		// コピーコンストラクタを使用する
		Date d3 = new Date(d1);
		System.out.println("d3 = " + d3.getYear() + "/" + d3.getMonth() + "/" + d3.getDay());
↑↑↑↑

デフォルトコンストラクタは、ここでは2000年1月1日を設定します。
コピーコンストラクタは、与えられたインスタンスの値をコピーします。

＜ヒント＞
	デフォルトコンストラクタの１行目は、
	public Date()
	からはじまります。
	また、コピーコンストラクタの１行目は、
	public Date(Date src)
	からはじまります。


----------------------------------------------------------------------------
■スマホアプリ開発塾の Facebookページ
https://www.facebook.com/SmaphoAppDevJuku
Facebookページを作成しました！
セミナー（イベント）の参加連絡などはこちらからも行えます。
----------------------------------------------------------------------------